#include <ESP8266WiFi.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
 
#define SCREEN_WIDTH 128    // OLED ekranın genişliği piksel değeri
#define SCREEN_HEIGHT 64    // OLED display yüksekliği piksel değeri
#define OLED_RESET -1       // Reset pin 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
 
String apiKey = "671LJ01FN94G0E1M"; // Thingspeakten alınan API keyi girilir
const char *ssid = "TP-Link_Extender";     // wifi adı ve şifresi girilir
const char *pass = "Mertcan.09";
const char* server = "api.thingspeak.com";
 
const int sampleWindow = 50;                              // Örnekleme sıklığı ms cinsinden (50 mS = 20Hz)
unsigned int sample;
 
WiFiClient client;
 
void setup() 
{
   Serial.begin(115200);                                    //Seri port ekranını başlatma komutu
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);              //OLED erkanı başlatma komutu
   display.display();                                     //ekran yazdırma
   display.clearDisplay();                                //ekran temizleme
   display.setTextSize(1);                                //ekran font büyüklüğü değeri
   display.setTextColor(WHITE);                           //yazı renk komutu
   display.setCursor(0,0);                                //yazının ekranın belirlenen pikseliğine sabitleme komutu
   display.println("Desibelolcer");                       //ekrana yazılacak yazı
   display.display();                                     
   delay(2000);                                           //2 sn bekleme
 
   WiFi.begin(ssid, pass);                                //Wifi başlatma
 
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
    Serial.println("");
    Serial.println("WiFi agina baglanildi");
    
    display.clearDisplay();
    display.setCursor(0,0);  
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.print("WiFi agina baglanildi");
    display.print(ssid);
    display.display();
    delay(4000);
    display.clearDisplay(); 
}
 
  
void loop() 
{
   unsigned long startMillis= millis();                   // Örnekleme başlangıç komutu
   float peakToPeak = 0;                                  // tepeden tepeye geçiş seviyesi
 
   unsigned int signalMax = 0;                            //min değeri
   unsigned int signalMin = 1024;                         //maks değeri
 
                                                          // 50 ms veri toplama
   while (millis() - startMillis < sampleWindow)
   {
      sample = analogRead(0);                             //mikrofondan veri okuma
      if (sample < 1024)                                  // yanlış okumalardan kaçınmak adına belirli bir aralık belirlendi
      {
         if (sample > signalMax)
         {
            signalMax = sample;                           // son ölçülen değer öncekinden yüksekse maks şeklinde kaydedilir
         }
         else if (sample < signalMin)
         {
            signalMin = sample;                           // değilse min değer şeklinde kaydedilir.
         }
      }
   }
   peakToPeak = signalMax - signalMin;                    // max - min = tepeden tepeye olan genlik
   float db = map(peakToPeak,20,900,49.5,90);             //desibel kalibresi
   display.setCursor(0,0);                                //yazı en sol üste sabitlenir
   display.setTextSize(2);                                //yazı fontu 2 olarak ayarlanır
   display.print(db);                                     //kalibre desibeller ekrana yazılır
   display.print(" dB");                                  //desibel değerinin yanına "dB" sembolü eklenir
 
 
    for(int x =5;x<114;x=x+6){                            //bar ölçekleri çizilir
      display.drawLine(x, 32, x, 27, WHITE);
    }
   display.drawRoundRect(0, 32, 120, 20, 6, WHITE);       //çubuk grafiğinin dışı çizilir
   int r = map(db,0,120,1,120);                           //çubuk grafiği ekranın genişliğine göre ayarlanır
   display.fillRoundRect(1, 33, r, 18, 6, WHITE);         //r genişliğinde çubuk grafiği çizilir
   display.display();                                     //ayarlanan her şey çizilir
   display.clearDisplay();                                //ekran temizlenir
 
   if (client.connect(server, 80)) // "184.106.153.149" ya da api.thingspeak.com
  {
    String postStr = apiKey;
    postStr += "&field1=";
    postStr += String(db);
    postStr += "r\n";
    
    client.print("POST /update HTTP/1.1\n");
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + apiKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);
   
  }
    client.stop();
    delay(150);
}
